24일 실기


형상관리시스템 : 버전 관리
git : 리눅스, 책 - 지옥에서 온 git


1. 내일 평가(문제해결능력 : 서술형)
	4, 3, 3, 1

2. 백업

------------------------------------------------------------
1. 데이터베이스 백업  

백업 (mysqldump) <->복원(mysql)
저장할 때 확장자 : 20231023_koreait.dump, *.sql

백업 : 윈도우에서 명령어 실행 mysqldump는 환경변수에 설정되어있으므로 
	저장할 폴더로 이동후 바로 실행 
백업
mysqldump -u아이디 -p 디비전체 > 20231023_grp.dump
mysqldump -u아이디 -p 디비 테이블 > 20231023_grp.dump
mysqldump -u아이디 -p 디비전체 > 20231023_grp.sql

권한이 없으면 그냥 root로

같은이름의 디비나 테이블 만들어두고 가져오기
복원
mysql -uroot -p 디비 < 20231023_grp.dump
mysql -uroot -p 디비 테이블 < 20231023_grp.dump


mysql workbench를 이용해서 백업 복원하는방법

------------------------------------------------------------------
DDL 
create drop alter
workbench에서 alter 하기


DML 

user shopdb;

drop table if exists employes;

create table employees(
emp_id int not null auto_increment,
emp_name varchar(30),
emp_salary int,
primary key(emp_id)
);


-INSERT하는 방법들

INSERT INTO employees VALUES(NULL, '홍길동', 100);
INSERT INTO employees (emp_id, emp_name, emp_salary) VALUES(null, '이영희', 200);

nor null은 필수
INSERT INTO employees(emp_id) VALUES(null);

INSERT INTO employees VALUES(NULL, '부산', 300), (NULL, '서울', 400), (NULL, '광주', 500);

-SELECT 기능
SELECT * FROM employees;
SELECT * FROM employees WHERE emp_name IS null;
SELECT * FROM employees WHERE emp_name IS NOT null;

SELECT * FROM employees WHERE emp_salary >= 300;

SELECT COUNT(*) AS '사원 수' FROM employees WHERE emp_salary >= 300;

집계함수 : 결과가 하나 => COUNT(), MAX(), MIN(), SUM(), AVG(),
	 DISTINCT(컬럼명), DISTINCT 컬럼명 : 중복제거

 + group by + having 조건

SELECT SUM(emp_salary) AS '사원 수' FROM employees WHERE emp_salary >= 300;

SELECT MAX(emp_salary) AS '사원 수' FROM employees WHERE emp_salary >= 300;

SELECT MIN(emp_salary) AS '사원 수' FROM employees WHERE emp_salary >= 300;







번호 이름 비번 성별 자기소게
남자 여자 
M, F
Man, Famale

CREATE TABLE member(
mem_id int not null auto_increment,
mem_name varchar(10) not null,
mem_pwd varchar(10) not null,
mem_gender char(1) not null,
mem_intro text,
mem_regdate date,
primary key(mem_id)
);


INSERT INTO member values(null, '홍길동', '1234', 'M', '자기소개1', now());
INSERT INTO member values(null, '홍길동', '5678', 'M', '자기소개2', sysdate());
INSERT INTO member values(null, '이영희', '0000', 'F', '자기소개3', curdate());
INSERT INTO member values(null, '김부산', '8888', 'M', '자기소개4', '2023-01-01');

SELECT * FROM member;

중복제거
SELECT DISTINCT mem_name FROM member;
SELECT DISTINCT(mem_name) FROM member;

INSERT INTO member values(null, '김부산', '8888', 'M', '자기소개4', now() + 1);

2023년 01월 01일 ~ 2023년 12월 31일에 입사한 사원의 이름과 날짜를 출력하시오
select mem_name, mem_regdate from member 
where mem_regdate >= '2023-01-01' and mem_regdate <= '2023-12-31';

2023년 01월 01일 ~ 2023년 12월 31일에 입사한 사원의 사원의 수를 출력하시오
select count(*) from member
where mem_regdate >= '2023-01-01' and mem_regdate <'2023-12-31';

성별이 남자인 사람의 아이디와 성별을 출력하시오
select mem_id, mem_gender FROM member
where mem_gender = 'M';

성별이 남자인 사람의 수를 출력하되 컬럼명은 회원(남자)로 출력하시오
select count(*) AS '회원(남자)' FROM member where mem_gender = 'M'; 

 일치 조건 <-> 유사 검색 
  =홍길동          %홍%~


입사일이 01월 01일 ~ 2023년 12월 31일에 사람의 수를 출력하시오
SELECT COUNT(*) FROM member WHERE mem_regdate >= '2023-01-01' AND mem_regdate <= '2023-12-31';


컬럼명 Between a And b;
입사일이 01월 01일 ~ 2023년 12월 31일에 사람의 수를 출력하시오(속도 O)
SELECT COUNT(*) FROM member WHERE mem_regdate between  '2023-01-01' AND '2023-12-31';

AND 연산 : 이고, 이면서 - 조건을 모두 만족
OR 연산 : 이거나, 또는 - 조건 중 하나만 만족


성별이 여자인 사람의 이름과 성별을 출력하시오
SELECT mem_name, mem_gender FROM member
where mem_gender = 'F';


OR 연산
성별이 남자이거나 여자인 사람의 이름과 성별을 출력하시오
SELECT mem_name, mem_gender FROM member
where mem_gender = 'F' OR mem_gender = 'M';


-OR 연산 : 컬럼명 IN (값1, 값2, 값3)
성별이 남자이거나 여자인 사람의 이름과 성별을 출력하시오
SELECT mem_name, mem_gender FROM member
where mem_gender IN('M','F');


---------------------------------------------------------------------------------------
유사어 검색 : _. %

_: 글자 한글자	홍_ _
% : 글자 수 제한 x	%홍% : 홍이 포함된 글자 , 홍% : 홍으로 시작되는 글자,  홍%

- 컬럼명 LIKE '%검색어

- 컬럼명 LIKE '%검색어'
- 컬럼명 LIKE '검색어%'

mem_name, mem_intro
이름이 홍으로 시작하는 사람의 모든 정보를 출력하시오
select * from member
where mem_name like '홍%';


이름이 홍으로 시작하는 사람의 수를 출력하시오
select count(*) as '홍으로 검색된 회원 수' from member
where mem_name like '홍%';

mem_intro 컬럼에 자기소개가 포함되어 있는 회원의 회원번호와, 이름, 성별을 출력하시오
단, 이름의 오름차순으로 정렬하시오
select mem_id, mem_name, mem_gender from member where mem_intro like '%자기소개%' order by mem_name asc;

조건 + 정렬 + (LIMIT)

select * from member where mem_intro like '%자기소개%' order by mem_name asc;

asc (오름차순)
desc(내림차순)

mem_intro 컬럼에 자기소개가 포함되어 있는 회원 정보 전부를 출력하시오
(단, 이름의 내림차순으로 출력하되 최근 2개만 출력되도록 하시오. LIMIT2)

select * from member 
where mem_intro like '%자기소개%' 
order by mem_name desc 
limit 2;


cf html에서 검색어를 변수로 받아서 db에 사용함
검색어 <input type="text" name="search">


where group by. . . . . .oder by xx limit x는 가장 뒤에 



--------------------------------------------------------------------------------------------
HTML

02_ex_form.html
input 예제
<label>검색어 입력 : </label>
<input type="text"><br />
<input type="number" min="0" max="10"><br />
<input type="search"><br />
<input type="password"><br />
<input type="date"><br />
<input type="email" required><br />
<input type="submit" value="확인">



03_ex_form.html
form 
fieldset
legend
input type


script 
console.log => 브라우저에서 확인 가능 (f12)


04_ex_form.html
 - 라디오 체크박스 select
 - multiple
 - input type="file" =><form action="" enctype="multipart/form-data"> 
 - 첨부파일코드에 인코딩타입 필요함




































