스프링 이론 공부..
---
객체에 데이터를 저장하는 방식 : 캡슐화
1. 필드에 직접 (사용하지 말자)
2. 생성자를 통해서 저장
3. getter, setter를 이용해서


-OOP
Object : 묶음 : 객체 - 타입이 다르고 많은 데이터를 이름 하나로 다룸

{
	{
	  String int double....  /1개의 자료(객체)
	}

	{
	  String int double....  /1개의 자료(객체)
	}
}
---
고정배열[타입]   : 객수 정하고 작업 


동적배열<참조타입> : 처음 개수는 정해져 있지만 자동으로 공간 조절 - 속도는 느림
List : 순서가 있는 동적배열
 - ArrayList, Vector : 0, 1, 2, 3, 4, 5, 6
 List a = new ArrayList

 Map
 - HashMap : 순서가 없는 동적배열 : 인덱스가 아니라 이름으로 찾아간다

배열
1. int [] num = null;
   num = new int[10]; 
  =>int [] num = new int[10];

  Register[] r = new Register[3];

2. int[] num = {1, 2, 3, 4, 5};
	public int add(int[] num) {
	
	}

3. int[] num = {}; 


tot06

배열 + 반복문(for - 배열번호가 필요할 때, 향상된 for- 값만 출력할 때) 같이 사용
1.for(int i = 0; i< 배열명.length; ++i) {출력코드(배열명[i])}
2.for(출력타입 별명 : 배열명) {출력코드(별명)}
배열번호(index)는 0번 부터 시작
i, idx, index 변수이름이 보이면 배열 처리
		
ArrEx01.java

ArrEx02.java
Arrays.toString(배열명)
향상된 for


ArrEx03.java

객체 지향 언어
  값,      동작    이루어지는.
(변수) (메소드)

합계, 평균 구하는 class => Cal

같은 파일에서 클래스가 여러개일 때는 
public class는 한 번만 존재해야 한다.


------------------------------------------------------
UsersEx.java
필드 : 아이디, 비밀번호
생성자
getter, setter

객체는 저장하는 용도, 출력

회원가입 : 1배열 ~ 3배열
필드, 생성자, getter, setter 
변수 사용하기 전에 초기화
int num = 0;

객체 사용하기 전에 초기화 -> 생성자
Users user = new Users()

*생성자 : default 생성자
파라미터가 없는 생성자는 없어도 실행

생성자 이름은 같지만 매개변수, 타입이 다를 때 - 생성자 오버로딩


------------------------------------------
구조분해할당

UsersEx2.java












































